package malwarebazaar

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

// Sample represents a malware sample from MalwareBazaar.
type Sample struct {
	FileName      string `json:"file_name"`
	SHA256        string `json:"sha256_hash"`
	Md5Hash       string `json:"md5_hash"`
	SHA1          string `json:"sha1_hash"`
	Signature     string `json:"signature"`
	FirstSeen     string `json:"first_seen"`
	FileType      string `json:"file_type"`
	FileSize      int    `json:"file_size"`
	Reporter      string `json:"reporter"`
	Anonymous     bool   `json:"anonymous"`
	MalwareFamily string `json:"malware_family"`
	SigmaUUID     string `json:"sigma_uuid"`
}

// NewSample initializes a new MalwareBazaar sample with a generated UUID.
func NewSample(fileName, sha256, md5, sha1, signature, firstSeen, fileType, reporter, malwareFamily string, fileSize int, anonymous bool) *Sample {
	return &Sample{
		FileName:      fileName,
		SHA256:        sha256,
		Md5Hash:       md5,
		SHA1:          sha1,
		Signature:     signature,
		FirstSeen:     firstSeen,
		FileType:      fileType,
		FileSize:      fileSize,
		Reporter:      reporter,
		Anonymous:     anonymous,
		MalwareFamily: malwareFamily,
		SigmaUUID:     uuid.New().String(),
	}
}

// ConvertToSigma converts a MalwareBazaar sample to a Sigma rule.
func (s *Sample) ConvertToSigma() string {
	date := time.Now().Format("2006-01-02")
	return fmt.Sprintf(`title: MalwareBazaar Sample Detection
id: %s
status: generated not verified
description: Detects malware sample identified by MalwareBazaar
author: Generated by Seacurity Currentâ„¢
date: %s
logsource:
    category: file
    product: windows
detection:
    selection:
        sha256_hash: '%s'
        md5_hash: '%s'
        sha1_hash: '%s'
        file_name: '%s'
    condition: selection
falsepositives:
    - Unknown
tags: #malwarebazaar
level: high`, s.SigmaUUID, date, s.SHA256, s.Md5Hash, s.SHA1, s.FileName)
}
